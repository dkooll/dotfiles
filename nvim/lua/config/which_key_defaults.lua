return {
  mode = { "n", "v" },
  --[";"] = { ":Alpha<CR>", "Dashboard" },
  -- w = { ":w!<CR>", "Save" },
  -- q = { ":confirm q<CR>", "Quit" },
  -- c = { ":bd<CR>", "Close Buffer" },
  -- h = { ":nohlsearch<CR>", "No Highlight" },
  p = { "<cmd>Telescope treesitter<CR>", "List Symbols" }, -- FIX:
  f = { "<cmd>lua require('plugins.utils').telescope_git_or_file()<CR>", "Find Files" }, -- FIX:
  -- r = {
  --   name = "Replace",
  --   r = { "<cmd>lua require('spectre').open()<cr>", "Replace" },
  --   w = { "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", "Replace Word" },
  --   f = { "<cmd>lua require('spectre').open_file_search()<cr>", "Replace Buffer" },
  -- },
  -- b = {
    -- name = "Buffers",
    -- j = { "<cmd>BufferLinePick<cr>", "Jump" },
    -- f = { "<cmd>Telescope buffers previewer=false<cr>", "Find" },
    -- b = { "<cmd>BufferLineCyclePrev<cr>", "Previous" },
    -- n = { "<cmd>BufferLineCycleNext<cr>", "Next" },
    --W = { "<cmd>noautocmd w<cr>", "Save without formatting (noautocmd)" },
    --e = {
      --"<cmd>BufferLinePickClose<cr>",
      --"Pick which buffer to close",
    --},
    --h = { "<cmd>BufferLineCloseLeft<cr>", "Close all to the left" },
    --l = {
      --"<cmd>BufferLineCloseRight<cr>",
      --"Close all to the right",
    --},
    --D = {
      --"<cmd>BufferLineSortByDirectory<cr>",
      --"Sort by directory",
    --},
    --L = {
      --"<cmd>BufferLineSortByExtension<cr>",
      --"Sort by language",
    --},
    --p = { "<cmd>BufferLineTogglePin<CR>", "Toggle pin" },
    --P = { "<cmd>BufferLineGroupClose ungrouped<CR>", "Delete non-pinned buffers" },
  -- },
  --G = {
    --name = "+Git",
    --j = { "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", "Next Hunk" },
    --k = { "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", "Prev Hunk" },
    --l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame" },
    --p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
    --r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
    --R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
    --s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
    --u = {
      --"<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
      --"Undo Stage Hunk",
    --},
    --o = { "<cmd>Telescope git_status<cr>", "Open changed file" },
    --b = { "<cmd>Telescope git_branches<cr>", "Checkout branch" },
    --c = { "<cmd>Telescope git_commits<cr>", "Checkout commit" },
    --C = {
      --"<cmd>Telescope git_bcommits<cr>",
      --"Checkout commit(for current file)",
    --},
    --d = {
      --"<cmd>Gitsigns diffthis HEAD<cr>",
      --"Git Diff",
    --},
  --},
  l = { -- FIX: this lsp code block
    name = "+LSP",
    a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
    A = { "<cmd>lua vim.lsp.buf.range_code_action()<cr>", "Range Code Actions" },
    d = { "<cmd>lua vim.lsp.buf.definition()<cr>", "Definition" },
    D = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Declaration" },
    i = { "<cmd>lua vim.lsp.buf.implementation()<cr>", "Implementation" },
    o = { "<cmd>lua vim.lsp.buf.type_definition()<cr>", "Type Definition" },
    R = { "<cmd>Telescope lsp_references<cr>", "References" },
    s = { "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Display Signature Information" },
    r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename all references" },
    f = { "<cmd>lua vim.lsp.buf.format()<cr>", "Format" },
    -- K = { "<cmd>lua vim.lsp.buf.hover()<cr>", "Hover" },
    l = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics (Trouble)" },
    L = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics (Trouble)" },
    w = { "<cmd>Telescope diagnostics<cr>", "Diagnostics" },
    t = { [[ <Esc><Cmd>lua require('telescope').extensions.refactoring.refactors()<CR>]], "Refactor" },

    -- j = { "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>", "Previous Diagnostic" },
    --k = { "<cmd>lua vim.lsp.diagnostic.goto_next()<cr>", "Next Diagnostic" },
    --e = { "<cmd>Telescope quickfix<cr>", "Telescope Quickfix" },
  },
  --n = {
    --name = "+Quickfix",
    --n = { "<cmd>cnext<CR>", "Next Quickfix" },
    --p = { "<cmd>cprev<CR>", "Previous Quickfix" },
    --t = { "<cmd>Telescope quickfixhistory<cr>", "Telescope Quickfix History" },
  --},
  --s = {
    --name = "+Search",
    --f = { "<cmd>Telescope find_files<cr>", "Find File" },
    --h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
    --H = { "<cmd>Telescope highlights<cr>", "Find highlight groups" },
    --M = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
    --r = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
    --R = { "<cmd>Telescope registers<cr>", "Registers" },
    --t = { "<cmd>Telescope live_grep<cr>", "Text" },
    --k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
    --C = { "<cmd>Telescope commands<cr>", "Commands" },
    --l = { "<cmd>Telescope resume<cr>", "Resume last search" },
    --c = { "<cmd>Telescope git_commits<cr>", "Git commits" },
    --b = { "<cmd>Telescope git_branches<cr>", "Git branches" },
    --s = { "<cmd>Telescope git_status<cr>", "Git status" },
    --S = { "<cmd>Telescope git_stash<cr>", "Git stash" },
    --z = { "<cmd>Telescope zoxide list<cr>", "Zoxide" },
    --d = {
      --name = "+DAP",
      --c = { "<cmd>Telescope dap commands<cr>", "Dap Commands" },
      --b = { "<cmd>Telescope dap list_breakpoints<cr>", "Dap Breakpoints" },
      --g = { "<cmd>Telescope dap configurations<cr>", "Dap Configurations" },
      --v = { "<cmd>Telescope dap variables<cr>", "Dap Variables" },
      --f = { "<cmd>Telescope dap frames<cr>", "Dap Frames" },
    --}
  --},
  --t = {
    --name = "+Todo",
    --t = { "<cmd>TodoTelescope<cr>", "Todo" },
    --T = { "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", "Todo/Fix/Fixme" },
    --x = { "<cmd>TodoTrouble<cr>", "Todo (Trouble)" },
    --X = { "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr><cr>", "Todo/Fix/Fixme (Trouble)" },
  --},
  --d = {
    --name = "Debug",
    --b = { "<cmd>lua require'dap'.toggle_breakpoint()<cr>", "Breakpoint" },
    --c = { "<cmd>lua require'dap'.continue()<cr>", "Continue" },
    --i = { "<cmd>lua require'dap'.step_into()<cr>", "Into" },
    --o = { "<cmd>lua require'dap'.step_over()<cr>", "Over" },
    --O = { "<cmd>lua require'dap'.step_out()<cr>", "Out" },
    --r = { "<cmd>lua require'dap'.repl.toggle()<cr>", "Repl" },
    --l = { "<cmd>lua require'dap'.run_last()<cr>", "Last" },
    --u = { "<cmd>lua require'dapui'.toggle()<cr>", "UI" },
    --x = { "<cmd>lua require'dap'.terminate()<cr>", "Exit" },
  --}
}


--return {
  --"folke/which-key.nvim",
  --event = "VeryLazy",
  --opts = {
    ---- You can place any global which-key settings here if desired.
  --},
  ---- No `keys = {}` here. Let plugins define their own keys.
--}


--return {
  --"folke/which-key.nvim",
  --event = "VeryLazy",
  --opts = {},
  --keys = {
    ---- Core
    --{ "<leader>;", ":Alpha<CR>", desc = "Dashboard" },
    --{ "<leader><space>", "<cmd>Telescope buffers<CR>", desc = "Show Buffers" },
    --{ "<leader>e", ":Neotree toggle<CR>", desc = "File Explorer" },
    --{ "<leader>w", ":w!<CR>", desc = "Save" },
    --{ "<leader>q", ":confirm q<CR>", desc = "Quit" },
    --{ "<leader>h", ":nohlsearch<CR>", desc = "No Highlight" },
    --{ "<leader>p", "<cmd>Telescope treesitter<CR>", desc = "List Symbols" },
    --{ "<leader>f", "<cmd>lua require('plugins.utils').telescope_git_or_file()<CR>", desc = "Find Files" },

    ---- Comment (NERDCommenter)
    --{ "<leader>/", desc = "Comment" },
    --{ "<leader>/c", "<Plug>NERDCommenterComment", desc = "Comment" },
    --{ "<leader>/C", "<Plug>NERDCommenterSexy", desc = "Sexy Comment" },
    --{ "<leader>/b", "<Plug>NERDCommenterAlignBoth", desc = "Align Both" },
    --{ "<leader>/A", "<Plug>NERDCommenterAppend", desc = "Append Comment" },
    --{ "<leader>/y", "<Plug>NERDCommenterYank", desc = "Yank Comment" },
    --{ "<leader>/s", "<Plug>NERDCommenterSexy", desc = "Sexy Comment" },
    --{ "<leader>/i", "<Plug>NERDCommenterInvert", desc = "Invert Comment" },
    --{ "<leader>/$", "<Plug>NERDCommenterToEOL", desc = "Comment to EOL" },
    --{ "<leader>/n", "<Plug>NERDCommenterNested", desc = "Nested Comment" },
    --{ "<leader>/m", "<Plug>NERDCommenterMinimal", desc = "Minimal Comment" },
    --{ "<leader>/ ", "<Plug>NERDCommenterToggle", desc = "Toggle Comment" },
    --{ "<leader>/u", "<Plug>NERDCommenterUncomment", desc = "Uncomment" },
    --{ "<leader>/l", "<Plug>NERDCommenterAlignLeft", desc = "Align Left" },

    ---- CopilotChat
    --{ "<leader>C", desc = "CopilotChat" },
    --{ "<leader>Ct", "<Cmd>CopilotChatTests<CR>", desc = "Generate tests" },
    --{ "<leader>Ce", "<Cmd>CopilotChatExplain<CR>", desc = "Explain code" },

    ---- Buffers
    --{ "<leader>b", desc = "Buffers" },
    --{ "<leader>bj", "<cmd>BufferLinePick<cr>", desc = "Jump" },
    --{ "<leader>bf", "<cmd>Telescope buffers previewer=false<cr>", desc = "Find" },
    --{ "<leader>bb", "<cmd>BufferLineCyclePrev<cr>", desc = "Previous" },
    --{ "<leader>bn", "<cmd>BufferLineCycleNext<cr>", desc = "Next" },
    --{ "<leader>bW", "<cmd>noautocmd w<cr>", desc = "Save without formatting" },
    --{ "<leader>be", "<cmd>BufferLinePickClose<cr>", desc = "Pick which buffer to close" },
    --{ "<leader>bh", "<cmd>BufferLineCloseLeft<cr>", desc = "Close all to the left" },
    --{ "<leader>bl", "<cmd>BufferLineCloseRight<cr>", desc = "Close all to the right" },
    --{ "<leader>bD", "<cmd>BufferLineSortByDirectory<cr>", desc = "Sort by directory" },
    --{ "<leader>bL", "<cmd>BufferLineSortByExtension<cr>", desc = "Sort by language" },
    --{ "<leader>bp", "<cmd>BufferLineTogglePin<CR>", desc = "Toggle pin" },
    --{ "<leader>bP", "<cmd>BufferLineGroupClose ungrouped<CR>", desc = "Delete non-pinned buffers" },

    ---- Git (Gitsigns)
    --{ "<leader>G", desc = "Git (Gitsigns)" },
    --{ "<leader>Gs", "<cmd>lua require('gitsigns').stage_hunk()<cr>", desc = "Stage Hunk" },
    --{ "<leader>Gr", "<cmd>lua require('gitsigns').reset_hunk()<cr>", desc = "Reset Hunk" },
    --{ "<leader>Gu", "<cmd>lua require('gitsigns').undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
    --{ "<leader>Gp", "<cmd>lua require('gitsigns').preview_hunk()<cr>", desc = "Preview Hunk" },
    --{ "<leader>Gl", "<cmd>lua require('gitsigns').blame_line()<cr>", desc = "Blame" },
    --{ "<leader>Gj", "<cmd>lua require('gitsigns').next_hunk({navigation_message=false})<cr>", desc = "Next Hunk" },
    --{ "<leader>Gk", "<cmd>lua require('gitsigns').prev_hunk({navigation_message=false})<cr>", desc = "Prev Hunk" },
    --{ "<leader>Gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Git Diff" },
    --{ "<leader>Gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit" },
    --{ "<leader>GC", "<cmd>Telescope git_bcommits<cr>", desc = "Checkout commit (for file)" },
    --{ "<leader>Gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
    --{ "<leader>Go", "<cmd>Telescope git_status<cr>", desc = "Open changed file" },
    --{ "<leader>GR", "<cmd>lua require('gitsigns').reset_buffer()<cr>", desc = "Reset Buffer" },

    ---- Additional Git Tools
    --{ "<leader>g", desc = "Git Tools" },
    --{ "<leader>gz", "<Cmd>lua vim.fn.system('lazygit')<CR>", desc = "Lazygit" },
    --{ "<leader>gl", "<Cmd>lua some_function_for_lazygit_log()<CR>", desc = "Lazygit Log (cwd)" },
    --{ "<leader>gf", "<Cmd>lua some_function_for_lazygit_file_history()<CR>", desc = "Lazygit Current File History" },
    --{ "<leader>gb", "<Cmd>lua some_function_for_git_blame_line()<CR>", desc = "Git Blame Line" },
    --{ "<leader>gB", "<Cmd>lua some_function_for_git_browse()<CR>", desc = "Git Browse" },

    ---- LSP
    --{ "<leader>l", desc = "LSP" },
    --{ "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
    --{ "<leader>lA", "<cmd>lua vim.lsp.buf.range_code_action()<cr>", desc = "Range Code Action" },
    --{ "<leader>ld", "<cmd>lua vim.lsp.buf.definition()<cr>", desc = "Definition" },
    --{ "<leader>lD", "<cmd>lua vim.lsp.buf.declaration()<cr>", desc = "Declaration" },
    --{ "<leader>li", "<cmd>lua vim.lsp.buf.implementation()<cr>", desc = "Implementation" },
    --{ "<leader>lo", "<cmd>lua vim.lsp.buf.type_definition()<cr>", desc = "Type Definition" },
    --{ "<leader>lR", "<cmd>Telescope lsp_references<cr>", desc = "References" },
    --{ "<leader>ls", "<cmd>lua vim.lsp.buf.signature_help()<cr>", desc = "Signature Help" },
    --{ "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
    --{ "<leader>lf", "<cmd>lua vim.lsp.buf.format()<cr>", desc = "Format" },
    --{ "<leader>lK", "<cmd>lua vim.lsp.buf.hover()<cr>", desc = "Hover" },
    --{ "<leader>ll", "<cmd>TroubleToggle document_diagnostics<cr>", desc = "Document Diagnostics" },
    --{ "<leader>lL", "<cmd>TroubleToggle workspace_diagnostics<cr>", desc = "Workspace Diagnostics" },
    --{ "<leader>lw", "<cmd>Telescope diagnostics<cr>", desc = "Diagnostics" },
    --{ "<leader>lt", "<cmd>lua require('telescope').extensions.refactoring.refactors()<CR>", desc = "Refactor" },

    ---- Quickfix
    --{ "<leader>n", desc = "Quickfix" },
    --{ "<leader>nn", "<cmd>cnext<CR>", desc = "Next Quickfix" },
    --{ "<leader>np", "<cmd>cprev<CR>", desc = "Previous Quickfix" },
    --{ "<leader>nt", "<cmd>Telescope quickfixhistory<cr>", desc = "Quickfix History" },

    ---- Search (Telescope)
    --{ "<leader>s", desc = "Search" },
    --{ "<leader>sf", "<cmd>Telescope find_files<cr>", desc = "Find File" },
    --{ "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Find Help" },
    --{ "<leader>sH", "<cmd>Telescope highlights<cr>", desc = "Find highlight groups" },
    --{ "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
    --{ "<leader>sr", "<cmd>Telescope oldfiles<cr>", desc = "Open Recent File" },
    --{ "<leader>sR", "<cmd>Telescope registers<cr>", desc = "Registers" },
    --{ "<leader>st", "<cmd>Telescope live_grep<cr>", desc = "Search Text" },
    --{ "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
    --{ "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },
    --{ "<leader>sl", "<cmd>Telescope resume<cr>", desc = "Resume last search" },
    --{ "<leader>sc", "<cmd>Telescope git_commits<cr>", desc = "Git commits" },
    --{ "<leader>sb", "<cmd>Telescope git_branches<cr>", desc = "Git branches" },
    --{ "<leader>ss", "<cmd>Telescope git_status<cr>", desc = "Git status" },
    --{ "<leader>sS", "<cmd>Telescope git_stash<cr>", desc = "Git stash" },
    --{ "<leader>sz", "<cmd>Telescope zoxide list<cr>", desc = "Zoxide" },

    ---- DAP under search
    --{ "<leader>sd", desc = "DAP" },
    --{ "<leader>sdc", "<cmd>Telescope dap commands<cr>", desc = "DAP Commands" },
    --{ "<leader>sdb", "<cmd>Telescope dap list_breakpoints<cr>", desc = "DAP Breakpoints" },
    --{ "<leader>sdg", "<cmd>Telescope dap configurations<cr>", desc = "DAP Configurations" },
    --{ "<leader>sdv", "<cmd>Telescope dap variables<cr>", desc = "DAP Variables" },
    --{ "<leader>sdf", "<cmd>Telescope dap frames<cr>", desc = "DAP Frames" },

    ---- Todo
    --{ "<leader>t", desc = "Todo" },
    --{ "<leader>tt", "<cmd>TodoTelescope<cr>", desc = "Todo" },
    --{ "<leader>tT", "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme" },
    --{ "<leader>tx", "<cmd>TodoTrouble<cr>", desc = "Todo (Trouble)" },
    --{ "<leader>tX", "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr><cr>", desc = "Todo/Fix/Fixme (Trouble)" },

    ---- Debug (DAP)
    --{ "<leader>d", desc = "Debug" },
    --{ "<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Breakpoint" },
    --{ "<leader>dc", "<cmd>lua require'dap'.continue()<cr>", desc = "Continue" },
    --{ "<leader>di", "<cmd>lua require'dap'.step_into()<cr>", desc = "Step Into" },
    --{ "<leader>do", "<cmd>lua require'dap'.step_over()<cr>", desc = "Step Over" },
    --{ "<leader>dO", "<cmd>lua require'dap'.step_out()<cr>", desc = "Step Out" },
    --{ "<leader>dr", "<cmd>lua require'dap'.repl.toggle()<cr>", desc = "Repl" },
    --{ "<leader>dl", "<cmd>lua require'dap'.run_last()<cr>", desc = "Run Last" },
    --{ "<leader>du", "<cmd>lua require'dapui'.toggle()<cr>", desc = "UI" },
    --{ "<leader>dx", "<cmd>lua require'dap'.terminate()<cr>", desc = "Terminate" },

    ---- Replace (Spectre)
    --{ "<leader>r", desc = "Replace" },
    --{ "<leader>rr", "<cmd>lua require('spectre').open()<cr>", desc = "Replace" },
    --{ "<leader>rw", "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", desc = "Replace Word" },
    --{ "<leader>rf", "<cmd>lua require('spectre').open_file_search()<cr>", desc = "Replace Buffer" },

    ---- Toggles (snacks.nvim)
    --{ "<leader>u", desc = "Toggle" },
    --{ "<leader>uh", "<Cmd>lua toggle_inlay_hints()<CR>", desc = "Toggle Inlay Hints" },
    --{ "<leader>uT", "<Cmd>lua toggle_treesitter()<CR>", desc = "Toggle Treesitter Highlight" },
    --{ "<leader>uc", "<Cmd>lua toggle_conceal()<CR>", desc = "Toggle Conceal" },
    --{ "<leader>ud", "<Cmd>lua toggle_diagnostics()<CR>", desc = "Toggle Diagnostics" },
    --{ "<leader>uw", "<Cmd>lua toggle_wrap()<CR>", desc = "Toggle Wrap" },
    --{ "<leader>us", "<Cmd>lua toggle_spelling()<CR>", desc = "Toggle Spelling" },
    --{ "<leader>un", "<Cmd>lua dismiss_notifications()<CR>", desc = "Dismiss Notifications" },
  --},
--}


--return {
  --mode = { "n", "v" },
  --[";"] = { ":Alpha<CR>", "Dashboard" },
  --w = { ":w!<CR>", "Save" },
  --q = { ":confirm q<CR>", "Quit" },
  --c = { ":bd<CR>", "Close Buffer" },
  --h = { ":nohlsearch<CR>", "No Highlight" },
  --p = { "<cmd>Telescope treesitter<CR>", "List Symbols" },
  --f = { "<cmd>lua require('plugins.utils').telescope_git_or_file()<CR>", "Find Files" },
  --r = {
    --name = "Replace",
    --r = { "<cmd>lua require('spectre').open()<cr>", "Replace" },
    --w = { "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", "Replace Word" },
    --f = { "<cmd>lua require('spectre').open_file_search()<cr>", "Replace Buffer" },
  --},
  --b = {
    --name = "Buffers",
    --j = { "<cmd>BufferLinePick<cr>", "Jump" },
    --f = { "<cmd>Telescope buffers previewer=false<cr>", "Find" },
    --b = { "<cmd>BufferLineCyclePrev<cr>", "Previous" },
    --n = { "<cmd>BufferLineCycleNext<cr>", "Next" },
    --W = { "<cmd>noautocmd w<cr>", "Save without formatting (noautocmd)" },
    --e = {
      --"<cmd>BufferLinePickClose<cr>",
      --"Pick which buffer to close",
    --},
    --h = { "<cmd>BufferLineCloseLeft<cr>", "Close all to the left" },
    --l = {
      --"<cmd>BufferLineCloseRight<cr>",
      --"Close all to the right",
    --},
    --D = {
      --"<cmd>BufferLineSortByDirectory<cr>",
      --"Sort by directory",
    --},
    --L = {
      --"<cmd>BufferLineSortByExtension<cr>",
      --"Sort by language",
    --},
    --p = { "<cmd>BufferLineTogglePin<CR>", "Toggle pin" },
    --P = { "<cmd>BufferLineGroupClose ungrouped<CR>", "Delete non-pinned buffers" },
  --},
  --G = {
    --name = "+Git",
    --j = { "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", "Next Hunk" },
    --k = { "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", "Prev Hunk" },
    --l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame" },
    --p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
    --r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
    --R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
    --s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
    --u = {
      --"<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
      --"Undo Stage Hunk",
    --},
    --o = { "<cmd>Telescope git_status<cr>", "Open changed file" },
    --b = { "<cmd>Telescope git_branches<cr>", "Checkout branch" },
    --c = { "<cmd>Telescope git_commits<cr>", "Checkout commit" },
    --C = {
      --"<cmd>Telescope git_bcommits<cr>",
      --"Checkout commit(for current file)",
    --},
    --d = {
      --"<cmd>Gitsigns diffthis HEAD<cr>",
      --"Git Diff",
    --},
  --},
  --l = {
    --name = "+LSP",
    --a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
    --A = { "<cmd>lua vim.lsp.buf.range_code_action()<cr>", "Range Code Actions" },
    --d = { "<cmd>lua vim.lsp.buf.definition()<cr>", "Definition" },
    --D = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Declaration" },
    --i = { "<cmd>lua vim.lsp.buf.implementation()<cr>", "Implementation" },
    --o = { "<cmd>lua vim.lsp.buf.type_definition()<cr>", "Type Definition" },
    --R = { "<cmd>Telescope lsp_references<cr>", "References" },
    --s = { "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Display Signature Information" },
    --r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename all references" },
    --f = { "<cmd>lua vim.lsp.buf.format()<cr>", "Format" },
    --K = { "<cmd>lua vim.lsp.buf.hover()<cr>", "Hover" },
    --l = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics (Trouble)" },
    --L = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics (Trouble)" },
    --w = { "<cmd>Telescope diagnostics<cr>", "Diagnostics" },
    --t = { [[ <Esc><Cmd>lua require('telescope').extensions.refactoring.refactors()<CR>]], "Refactor" },

    ---- j = { "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>", "Previous Diagnostic" },
    ----k = { "<cmd>lua vim.lsp.diagnostic.goto_next()<cr>", "Next Diagnostic" },
    ----e = { "<cmd>Telescope quickfix<cr>", "Telescope Quickfix" },
  --},
  --n = {
    --name = "+Quickfix",
    --n = { "<cmd>cnext<CR>", "Next Quickfix" },
    --p = { "<cmd>cprev<CR>", "Previous Quickfix" },
    --t = { "<cmd>Telescope quickfixhistory<cr>", "Telescope Quickfix History" },
  --},
  ----s = {
    ----name = "+Search",
    ----f = { "<cmd>Telescope find_files<cr>", "Find File" },
    ----h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
    ----H = { "<cmd>Telescope highlights<cr>", "Find highlight groups" },
    ----M = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
    ----r = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
    ----R = { "<cmd>Telescope registers<cr>", "Registers" },
    ----t = { "<cmd>Telescope live_grep<cr>", "Text" },
    ----k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
    ----C = { "<cmd>Telescope commands<cr>", "Commands" },
    ----l = { "<cmd>Telescope resume<cr>", "Resume last search" },
    ----c = { "<cmd>Telescope git_commits<cr>", "Git commits" },
    ----b = { "<cmd>Telescope git_branches<cr>", "Git branches" },
    ----s = { "<cmd>Telescope git_status<cr>", "Git status" },
    ----S = { "<cmd>Telescope git_stash<cr>", "Git stash" },
    ----z = { "<cmd>Telescope zoxide list<cr>", "Zoxide" },
    ----d = {
      ----name = "+DAP",
      ----c = { "<cmd>Telescope dap commands<cr>", "Dap Commands" },
      ----b = { "<cmd>Telescope dap list_breakpoints<cr>", "Dap Breakpoints" },
      ----g = { "<cmd>Telescope dap configurations<cr>", "Dap Configurations" },
      ----v = { "<cmd>Telescope dap variables<cr>", "Dap Variables" },
      ----f = { "<cmd>Telescope dap frames<cr>", "Dap Frames" },
    ----}
  ----},
  --T = {
    --name = "+Todo",
    --t = { "<cmd>TodoTelescope<cr>", "Todo" },
    --T = { "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", "Todo/Fix/Fixme" },
    --x = { "<cmd>TodoTrouble<cr>", "Todo (Trouble)" },
    --X = { "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr><cr>", "Todo/Fix/Fixme (Trouble)" },
  --},
  --d = {
    --name = "Debug",
    --b = { "<cmd>lua require'dap'.toggle_breakpoint()<cr>", "Breakpoint" },
    --c = { "<cmd>lua require'dap'.continue()<cr>", "Continue" },
    --i = { "<cmd>lua require'dap'.step_into()<cr>", "Into" },
    --o = { "<cmd>lua require'dap'.step_over()<cr>", "Over" },
    --O = { "<cmd>lua require'dap'.step_out()<cr>", "Out" },
    --r = { "<cmd>lua require'dap'.repl.toggle()<cr>", "Repl" },
    --l = { "<cmd>lua require'dap'.run_last()<cr>", "Last" },
    --u = { "<cmd>lua require'dapui'.toggle()<cr>", "UI" },
    --x = { "<cmd>lua require'dap'.terminate()<cr>", "Exit" },
  --}
-- }
